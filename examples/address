#!/usr/bin/env python3
"""
Display Contact Information

Usage:
    contact <name>
"""

from docopt import docopt
from inform import codicil, display, fatal, full_stop, indent, os_error
import nestedtext as nt
from voluptuous import Schema, Required, Any, Invalid
import re

contacts_file = "address.nt"

def normalize_key(key, parent_keys):
    if len(parent_keys) == 0:
        return key
    return ' '.join(key.lower().split())

def render_contact(data):
    text = nt.dumps(data, default=repr)
    return (re.sub(r'^(\s*)[>:]\s?(.*)$', r'\1\2', text, flags=re.M))

cmdline = docopt(__doc__)
name = cmdline['<name>']

try:
    # define structure of contacts database
    contacts_schema = Schema({
        str: {
            'position': str,
            'address': str,
            'phone': Required(Any({str:str},str)),
            'email': Required(Any({str:str},str)),
            'additional roles': Any(list,str),
        }
    })

    # read contacts database
    contacts = contacts_schema(
        nt.load(
            contacts_file,
            top = 'dict',
            normalize_key = normalize_key,
            keymap = (keymap:={})
        )
    )

    # display requested contact
    for fullname, contact_info in contacts.items():
        if name in fullname.lower():
            display(fullname)
            display(indent(render_contact(contact_info)))

except nt.NestedTextError as e:
    e.terminate()
except Invalid as e:
    kind = 'key' if 'key' in e.msg else 'value'
    keys = tuple(e.path)
    codicil = keymap[keys].as_line(kind) if keys in keymap else None
    fatal(
        full_stop(e.msg),
        culprit = (contacts_file, nt.join_keys(keys, keymap=keymap)),
        codicil = codicil
    )
except OSError as e:
    fatal(os_error(e))
