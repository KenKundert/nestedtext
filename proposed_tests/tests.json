{
    "load_tests": {
        "alpine": {
            "load_in": "Pg==",
            "load_out": "",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 1
            }
        },
        "medical": {
            "load_in": "Pgo+",
            "load_out": "\n",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 2
            }
        },
        "terrier": {
            "load_in": "PiBUaG9zZSB3aG8gY2FuIG1ha2UgeW91IGJlbGlldmUgYWJzdXJkaXRpZXMgY2FuIG1ha2UgeW91IGNvbW1pdCBhdHJvY2l0aWVzLiAg4oCUIFZvbHRhaXJl",
            "load_out": "Those who can make you believe absurdities can make you commit atrocities.  — Voltaire",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 1
            }
        },
        "perimeter": {
            "load_in": "PiDigJxUaGUgd29ydGggb2YgYSBtYW4gdG8gaGlzIHNvY2lldHkgY2FuIGJlIG1lYXN1cmVkIGJ5IHRoZSBjb250cmlidXRpb24gaGUKPiAgbWFrZXMgdG8gaXQg4oCUIGxlc3MgdGhlIGNvc3Qgb2Ygc3VzdGFpbmluZyBoaW1zZWxmIGFuZCBoaXMgbWlzdGFrZXMgaW4gaXQu4oCdCj4KPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKAlCBFcmlrIEpvbnNzb24KPg==",
            "load_out": "“The worth of a man to his society can be measured by the contribution he\n makes to it — less the cost of sustaining himself and his mistakes in it.”\n\n                                               — Erik Jonsson\n",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 5
            }
        },
        "precipice": {
            "load_in": "OgogID4=",
            "load_out": {
                "": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 1,
                "string item": 1
            }
        },
        "province": {
            "load_in": "a2V5IDE6IHZhbHVlIDEKa2V5IDI6IHZhbHVlIDIKa2V5IDM6IHZhbHVlIDMK",
            "load_out": {
                "key 1": "value 1",
                "key 2": "value 2",
                "key 3": "value 3"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 3
            }
        },
        "detonator": {
            "load_in": "a2V5IDE6IHZhbHVlIDEKa2V5IDI6IHZhbHVlIDIKa2V5IDM6IHZhbHVlIDM=",
            "load_out": {
                "key 1": "value 1",
                "key 2": "value 2",
                "key 3": "value 3"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 3
            }
        },
        "theater": {
            "load_in": "a2V5IDE6IHZhbHVlIDEKa2V5IDI6CmtleSAzOgogICAgLSB2YWx1ZSAzYQogICAgLSB2YWx1ZSAzYgprZXkgNDoKICAgIGtleSA0YTogdmFsdWUgNGEKICAgIGtleSA0YjogdmFsdWUgNGIKa2V5IDU6CiAgICA+IGZpcnN0IGxpbmUgb2YgdmFsdWUgNQogICAgPiBzZWNvbmQgbGluZSBvZiB2YWx1ZSA1",
            "load_out": {
                "key 1": "value 1",
                "key 2": "",
                "key 3": [
                    "value 3a",
                    "value 3b"
                ],
                "key 4": {
                    "key 4a": "value 4a",
                    "key 4b": "value 4b"
                },
                "key 5": "first line of value 5\nsecond line of value 5"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 7,
                "list item": 2,
                "string item": 2
            }
        },
        "crescent": {
            "load_in": "LQ==",
            "load_out": [
                ""
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 1
            }
        },
        "automaton": {
            "load_in": "LSB2YWx1ZSAxCi0gdmFsdWUgMgotIHZhbHVlIDMK",
            "load_out": [
                "value 1",
                "value 2",
                "value 3"
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 3
            }
        },
        "wally": {
            "load_in": "LSB2YWx1ZSAxCi0gdmFsdWUgMgotIHZhbHVlIDM=",
            "load_out": [
                "value 1",
                "value 2",
                "value 3"
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 3
            }
        },
        "native": {
            "load_in": "LSB2YWx1ZSAxCi0KLQogICAgLSB2YWx1ZSAzYQogICAgLSB2YWx1ZSAzYgotCiAgICBrZXkgNGE6IHZhbHVlIDRhCiAgICBrZXkgNGI6IHZhbHVlIDRiCi0KICAgID4gZmlyc3QgbGluZSBvZiB2YWx1ZSA1CiAgICA+IHNlY29uZCBsaW5lIG9mIHZhbHVlIDU=",
            "load_out": [
                "value 1",
                "",
                [
                    "value 3a",
                    "value 3b"
                ],
                {
                    "key 4a": "value 4a",
                    "key 4b": "value 4b"
                },
                "first line of value 5\nsecond line of value 5"
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 7,
                "dict item": 2,
                "string item": 2
            }
        },
        "answer": {
            "load_in": "OgogICAgOgogICAgICAgID4=",
            "load_out": {
                "": {
                    "": ""
                }
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 2,
                "string item": 1
            }
        },
        "screwy": {
            "load_in": "OiBrZXkgMQo6ICAgICB0aGUgZmlyc3Qga2V5CiAgICA+IHZhbHVlIDEKOiBrZXkgMjogdGhlIHNlY29uZCBrZXkKICAgIC0gdmFsdWUgMmEKICAgIC0gdmFsdWUgMmI=",
            "load_out": {
                "key 1\n    the first key": "value 1",
                "key 2: the second key": [
                    "value 2a",
                    "value 2b"
                ]
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 3,
                "string item": 1,
                "list item": 2
            }
        },
        "socialize": {
            "load_in": "e30=",
            "load_out": {},
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "abound": {
            "load_in": "ezp9",
            "load_out": {
                "": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "washday": {
            "load_in": "e2tleSAxOiB2YWx1ZSAxLCBrZXkgMjogdmFsdWUgMiwga2V5IDM6IHZhbHVlIDN9",
            "load_out": {
                "key 1": "value 1",
                "key 2": "value 2",
                "key 3": "value 3"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "exhume": {
            "load_in": "e2tleSAxOiB2YWx1ZSAxLCBrZXkgMjogW3ZhbHVlIDJhLCB2YWx1ZSAyYl0sIGtleSAzOiB7a2V5IDNhOiB2YWx1ZSAzYSwga2V5IDNiOiB2YWx1ZSAzYn19",
            "load_out": {
                "key 1": "value 1",
                "key 2": [
                    "value 2a",
                    "value 2b"
                ],
                "key 3": {
                    "key 3a": "value 3a",
                    "key 3b": "value 3b"
                }
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "ointment": {
            "load_in": "W10=",
            "load_out": [],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline list": 1
            }
        },
        "banquet": {
            "load_in": "WyBd",
            "load_out": [
                ""
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline list": 1
            }
        },
        "cliff": {
            "load_in": "WyAgXQ==",
            "load_out": [
                ""
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline list": 1
            }
        },
        "stingray": {
            "load_in": "W3ZhbHVlIDEsIHZhbHVlIDIsIHZhbHVlIDNd",
            "load_out": [
                "value 1",
                "value 2",
                "value 3"
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline list": 1
            }
        },
        "spastic": {
            "load_in": "W3ZhbHVlIDEsIFt2YWx1ZSAyYSwgdmFsdWUgMmJdLCB7a2V5IDNhOiB2YWx1ZSAzYSwga2V5IDNiOiB2YWx1ZSAzYn1d",
            "load_out": [
                "value 1",
                [
                    "value 2a",
                    "value 2b"
                ],
                {
                    "key 3a": "value 3a",
                    "key 3b": "value 3b"
                }
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline list": 1
            }
        },
        "brother": {
            "load_in": "",
            "load_out": null,
            "load_err": {},
            "encoding": "utf-8",
            "types": {}
        },
        "cosmology": {
            "load_in": "Iw==",
            "load_out": null,
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "comment": 1
            }
        },
        "clone": {
            "load_in": "Cg==",
            "load_out": null,
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "blank": 1
            }
        },
        "spillage": {
            "load_in": "YToKIC0KICBiOgogICAtCiAgICBjOgogICAgIC0KICAgICAgZDoKICAgICAgIC0KICAgICAgICBlOgogICAgICAgICAtCiAgICAgICAgICBmOgogICAgICAgICAgIC0KICAgICAgICAgICAgZzoKICAgICAgICAgICAgIC0KICAgICAgICAgICAgICBoOgogICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICBpOgogICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgajoKICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICBrOgogICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICBsOgogICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgbToKICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICBuOgogICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDOsToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM6yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM6zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDOtDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM61OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM62OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDOtzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM64OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM65OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDOujoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM67OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM68OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDOvToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM6+OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM6/OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPgDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+BOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+DOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPhDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+FOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+GOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPhzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+IOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+JOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCg==",
            "load_out": {
                "a": [
                    {
                        "b": [
                            {
                                "c": [
                                    {
                                        "d": [
                                            {
                                                "e": [
                                                    {
                                                        "f": [
                                                            {
                                                                "g": [
                                                                    {
                                                                        "h": [
                                                                            {
                                                                                "i": [
                                                                                    {
                                                                                        "j": [
                                                                                            {
                                                                                                "k": [
                                                                                                    {
                                                                                                        "l": [
                                                                                                            {
                                                                                                                "m": [
                                                                                                                    {
                                                                                                                        "n": [
                                                                                                                            {
                                                                                                                                "o": [
                                                                                                                                    {
                                                                                                                                        "p": [
                                                                                                                                            {
                                                                                                                                                "q": [
                                                                                                                                                    {
                                                                                                                                                        "r": [
                                                                                                                                                            {
                                                                                                                                                                "s": [
                                                                                                                                                                    {
                                                                                                                                                                        "t": [
                                                                                                                                                                            {
                                                                                                                                                                                "u": [
                                                                                                                                                                                    {
                                                                                                                                                                                        "v": [
                                                                                                                                                                                            {
                                                                                                                                                                                                "w": [
                                                                                                                                                                                                    {
                                                                                                                                                                                                        "x": [
                                                                                                                                                                                                            {
                                                                                                                                                                                                                "y": [
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        "z": [
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                "α": [
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        "β": [
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                "γ": [
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        "δ": [
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                "ε": [
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                        "ζ": [
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                "η": [
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                        "θ": [
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                "ι": [
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                        "κ": [
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                "λ": [
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                        "μ": [
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                "ν": [
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                        "ξ": [
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                "ο": [
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                        "π": [
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                "ρ": [
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                        "σ": [
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                "τ": [
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                        "υ": [
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                "φ": [
                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                        "χ": [
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                "ψ": [
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                        "ω": [
                                                                                                                                                                                                                                                                                                                                                                                                                            ""
                                                                                                                                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                ]
                                                                                                                                                                                                            }
                                                                                                                                                                                                        ]
                                                                                                                                                                                                    }
                                                                                                                                                                                                ]
                                                                                                                                                                                            }
                                                                                                                                                                                        ]
                                                                                                                                                                                    }
                                                                                                                                                                                ]
                                                                                                                                                                            }
                                                                                                                                                                        ]
                                                                                                                                                                    }
                                                                                                                                                                ]
                                                                                                                                                            }
                                                                                                                                                        ]
                                                                                                                                                    }
                                                                                                                                                ]
                                                                                                                                            }
                                                                                                                                        ]
                                                                                                                                    }
                                                                                                                                ]
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 50,
                "list item": 50
            }
        },
        "moccasin": {
            "load_in": "e2E6W3tiOlt7Yzpbe2Q6W3tlOlt7Zjpbe2c6W3toOlt7aTpbe2o6W3trOlt7bDpbe206W3tuOlt7bzpbe3A6W3txOlt7cjpbe3M6W3t0Olt7dTpbe3Y6W3t3Olt7eDpbe3k6W3t6OlsgXX1dfV19XX1dfV19XX1dfV19XX1dfV19XX1dfV19XX1dfV19XX1dfV19XX1dfV19XX1dfQ==",
            "load_out": {
                "a": [
                    {
                        "b": [
                            {
                                "c": [
                                    {
                                        "d": [
                                            {
                                                "e": [
                                                    {
                                                        "f": [
                                                            {
                                                                "g": [
                                                                    {
                                                                        "h": [
                                                                            {
                                                                                "i": [
                                                                                    {
                                                                                        "j": [
                                                                                            {
                                                                                                "k": [
                                                                                                    {
                                                                                                        "l": [
                                                                                                            {
                                                                                                                "m": [
                                                                                                                    {
                                                                                                                        "n": [
                                                                                                                            {
                                                                                                                                "o": [
                                                                                                                                    {
                                                                                                                                        "p": [
                                                                                                                                            {
                                                                                                                                                "q": [
                                                                                                                                                    {
                                                                                                                                                        "r": [
                                                                                                                                                            {
                                                                                                                                                                "s": [
                                                                                                                                                                    {
                                                                                                                                                                        "t": [
                                                                                                                                                                            {
                                                                                                                                                                                "u": [
                                                                                                                                                                                    {
                                                                                                                                                                                        "v": [
                                                                                                                                                                                            {
                                                                                                                                                                                                "w": [
                                                                                                                                                                                                    {
                                                                                                                                                                                                        "x": [
                                                                                                                                                                                                            {
                                                                                                                                                                                                                "y": [
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        "z": [
                                                                                                                                                                                                                            ""
                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                ]
                                                                                                                                                                                                            }
                                                                                                                                                                                                        ]
                                                                                                                                                                                                    }
                                                                                                                                                                                                ]
                                                                                                                                                                                            }
                                                                                                                                                                                        ]
                                                                                                                                                                                    }
                                                                                                                                                                                ]
                                                                                                                                                                            }
                                                                                                                                                                        ]
                                                                                                                                                                    }
                                                                                                                                                                ]
                                                                                                                                                            }
                                                                                                                                                        ]
                                                                                                                                                    }
                                                                                                                                                ]
                                                                                                                                            }
                                                                                                                                        ]
                                                                                                                                    }
                                                                                                                                ]
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "insulate": {
            "load_in": "Y29kZSAgIDogaW5wdXQgc2lnbmVkIFs3OjBdIGxldmVsCnJlZ2V4ICA6IFsrLV0/KFswLTldKlsuXSk/WzAtOV0rXHMqXHcqCm1hdGggICA6ICR4ID0gXGZyYWN7ey1iIFxwbSBcc3FydCB7Yl4yIC0gNGFjfX19ezJhfSQKdW5pY29kZTogSm9zw6kgYW5kIEZyYW7Dp29pcw==",
            "load_out": {
                "code": "input signed [7:0] level",
                "regex": "[+-]?([0-9]*[.])?[0-9]+\\s*\\w*",
                "math": "$x = \\frac{{-b \\pm \\sqrt {b^2 - 4ac}}}{2a}$",
                "unicode": "José and François"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 4
            }
        },
        "scent": {
            "load_in": "PiAgICAgVGhpcyBpcyB0aGUgZmlyc3QgbGluZSBvZiBhIG11bHRpbGluZSBzdHJpbmcsIGl0IGlzIGluZGVudGVkLgo+IFRoaXMgaXMgdGhlIHNlY29uZCBsaW5lLCBpdCBpcyBub3QgaW5kZW50ZWQu",
            "load_out": "    This is the first line of a multiline string, it is indented.\nThis is the second line, it is not indented.",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 2
            }
        },
        "smithy": {
            "load_in": "IyB0aGlzIGxpbmUgaXMgaWdub3JlZAoKIyB0aGlzIGxpbmUgaXMgYWxzbyBpZ25vcmVkLCBhcyBpcyB0aGUgYmxhbmsgbGluZSBhYm92ZS4KCiMgdGhpcyBpcyBhIGNvbW1lbnQgdGhhdCBjb250YWlucyB1bmljb2RlOiDigJzOsc6yzrMg4oSmxrEg8J2EnvCfgZIg8J+MgOKAnQo=",
            "load_out": null,
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "comment": 3,
                "blank": 2
            }
        },
        "import": {
            "load_in": "PiB0aGlzIGlzIHRoZSBmaXJzdCBsaW5lIG9mIGEgbXVsdGlsaW5lIHN0cmluZwojIHRoaXMgbGluZSBpcyBpZ25vcmVkCj4gdGhpcyBpcyB0aGUgc2Vjb25kIGxpbmUgb2YgdGhlIG11bHRpbGluZSBzdHJpbmc=",
            "load_out": "this is the first line of a multiline string\nthis is the second line of the multiline string",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 2,
                "comment": 1
            }
        },
        "unlearn": {
            "load_in": "IyBDb250YWN0IGluZm9ybWF0aW9uIGZvciBvdXIgb2ZmaWNlcnMKCkthdGhlcnluIE1jRGFuaWVsOgogICAgcG9zaXRpb246IHByZXNpZGVudAogICAgYWRkcmVzczoKICAgICAgICA+IDEzOCBBbG1vbmQgU3RyZWV0CiAgICAgICAgPiBUb3Bla2EsIEthbnNhcyAyMDY5NwogICAgcGhvbmU6CiAgICAgICAgY2VsbDogMS0yMTAtNTU1LTUyOTcKICAgICAgICB3b3JrOiAxLTIxMC01NTUtMzQyMwogICAgICAgIGhvbWU6IDEtMjEwLTU1NS04NDcwCiAgICAgICAgICAgICMgS2F0aGVyeW4gcHJlZmVycyB0aGF0IHdlIGFsd2F5cyBjYWxsIGhlciBvbiBoZXIgY2VsbCBwaG9uZS4KICAgIGVtYWlsOiBLYXRlTWNEQGFvbC5jb20KICAgIGtpZHM6CiAgICAgICAgLSBKb2FuaWUKICAgICAgICAtIFRlcnJhbmNlCgpNYXJnYXJldCBIb2RnZToKICAgIHBvc2l0aW9uOiB2aWNlIHByZXNpZGVudAogICAgYWRkcmVzczoKICAgICAgICA+IDI1ODYgTWFyaWdvbGQgTGFuZQogICAgICAgID4gVG9wZWthLCBLYW5zYXMgMjA2OTcKICAgIHBob25lOgogICAgICAgIHtjZWxsOiAxLTQ3MC01NTUtMDM5OCwgaG9tZTogMS00NzAtNTU1LTc1NzB9CiAgICBlbWFpbDogbWFyZ2FyZXQuaG9kZ2VAa3UuZWR1CiAgICBraWRzOgogICAgICAgIFtBcm5pZSwgWmFjaCwgTWFnZ2llXQ==",
            "load_out": {
                "Katheryn McDaniel": {
                    "position": "president",
                    "address": "138 Almond Street\nTopeka, Kansas 20697",
                    "phone": {
                        "cell": "1-210-555-5297",
                        "work": "1-210-555-3423",
                        "home": "1-210-555-8470"
                    },
                    "email": "KateMcD@aol.com",
                    "kids": [
                        "Joanie",
                        "Terrance"
                    ]
                },
                "Margaret Hodge": {
                    "position": "vice president",
                    "address": "2586 Marigold Lane\nTopeka, Kansas 20697",
                    "phone": {
                        "cell": "1-470-555-0398",
                        "home": "1-470-555-7570"
                    },
                    "email": "margaret.hodge@ku.edu",
                    "kids": [
                        "Arnie",
                        "Zach",
                        "Maggie"
                    ]
                }
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "comment": 2,
                "blank": 2,
                "dict item": 15,
                "string item": 4,
                "list item": 2,
                "inline dict": 1,
                "inline list": 1
            }
        },
        "amnesty": {
            "load_in": "dHJlYXN1cmVyOgogICAgbmFtZTogRnVtaWtvIFB1cnZpcwogICAgYWRkcmVzczogSG9tZQogICAgICAgID4gMzYzNiBCdWZmYWxvIEF2ZQogICAgICAgID4gVG9wZWthLCBLYW5zYXMgMjA2OTI=",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "        > 3636 Buffalo Ave",
                "lineno": 3,
                "colno": 4
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 3,
                "string item": 2
            }
        },
        "subdue": {
            "load_in": "dHJlYXN1cmVyOgogICAgbmFtZTogRnVtaWtvIFB1cnZpcwogICAgYWRkcmVzczogIAogICAgICAgID4gMzYzNiBCdWZmYWxvIEF2ZQogICAgICAgID4gVG9wZWthLCBLYW5zYXMgMjA2OTI=",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "        > 3636 Buffalo Ave",
                "lineno": 3,
                "colno": 4
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 3,
                "string item": 2
            }
        },
        "balloon": {
            "load_in": "Og==",
            "load_out": null,
            "load_err": {
                "message": "indented value must follow multi-line key.",
                "line": ":",
                "lineno": 0
            },
            "encoding": "utf-8",
            "types": {
                "key item": 1
            }
        },
        "lolly": {
            "load_in": "OgogICAgOg==",
            "load_out": null,
            "load_err": {
                "message": "indented value must follow multi-line key.",
                "line": "    :",
                "lineno": 1
            },
            "encoding": "utf-8",
            "types": {
                "key item": 2
            }
        },
        "cornea": {
            "load_in": "PiBMb3JlbSBJcHN1bQo+Cj4gICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbwo+IGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgCj4gbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IAo+IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiAKPiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIAo+IHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIAo+IGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLg==",
            "load_out": "Lorem Ipsum\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \nminim veniam, quis nostrud exercitation ullamco laboris nisi ut \naliquip ex ea commodo consequat. Duis aute irure dolor in \nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \npariatur. Excepteur sint occaecat cupidatat non proident, sunt in \nculpa qui officia deserunt mollit anim id est laborum.",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 9
            }
        },
        "tacky": {
            "load_in": "Pgo+IExvcmVtIElwc3VtCj4KPiAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvCj4gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCAKPiBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgCj4gYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIAo+IHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgCj4gcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gCj4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uCj4=",
            "load_out": "\nLorem Ipsum\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \nminim veniam, quis nostrud exercitation ullamco laboris nisi ut \naliquip ex ea commodo consequat. Duis aute irure dolor in \nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \npariatur. Excepteur sint occaecat cupidatat non proident, sunt in \nculpa qui officia deserunt mollit anim id est laborum.\n",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 11
            }
        },
        "mailbox": {
            "load_in": "Pgo+IExvcmVtIElwc3VtCj4KPiAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvCj4gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCAKPiBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgCj4gYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIAo+IHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgCj4gcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gCj4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uCj4KCiMgSGVyZSBpcyBhIGJpdCBtb3JlIHRoYXQgb25lIHJhcmVseSBzZWVzIC4uLgo+ICAgICBTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbQo+IGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwgdG90YW0gcmVtIGFwZXJpYW0sIGVhcXVlIGlwc2EgcXVhZSAKPiBhYiBpbGxvIGludmVudG9yZSB2ZXJpdGF0aXMgZXQgcXVhc2kgYXJjaGl0ZWN0byBiZWF0YWUgdml0YWUgZGljdGEgCj4gc3VudCBleHBsaWNhYm8uIE5lbW8gZW5pbSBpcHNhbSB2b2x1cHRhdGVtIHF1aWEgdm9sdXB0YXMgc2l0IAo+IGFzcGVybmF0dXIgYXV0IG9kaXQgYXV0IGZ1Z2l0LCBzZWQgcXVpYSBjb25zZXF1dW50dXIgbWFnbmkgZG9sb3JlcyBlb3MgCj4gcXVpIHJhdGlvbmUgdm9sdXB0YXRlbSBzZXF1aSBuZXNjaXVudC4gTmVxdWUgcG9ycm8gcXVpc3F1YW0gZXN0LCBxdWkgCj4gZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciwgYWRpcGlzY2kgdmVsaXQsIHNlZCAKPiBxdWlhIG5vbiBudW1xdWFtIGVpdXMgbW9kaSB0ZW1wb3JhIGluY2lkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmFtIAo+IGFsaXF1YW0gcXVhZXJhdCB2b2x1cHRhdGVtLiBVdCBlbmltIGFkIG1pbmltYSB2ZW5pYW0sIHF1aXMgbm9zdHJ1bSAKPiBleGVyY2l0YXRpb25lbSB1bGxhbSBjb3Jwb3JpcyBzdXNjaXBpdCBsYWJvcmlvc2FtLCBuaXNpIHV0IGFsaXF1aWQgZXggCj4gZWEgY29tbW9kaSBjb25zZXF1YXR1cj8gUXVpcyBhdXRlbSB2ZWwgZXVtIGl1cmUgcmVwcmVoZW5kZXJpdCBxdWkgaW4gCj4gZWEgdm9sdXB0YXRlIHZlbGl0IGVzc2UgcXVhbSBuaWhpbCBtb2xlc3RpYWUgY29uc2VxdWF0dXIsIHZlbCBpbGx1bSAKPiBxdWkgZG9sb3JlbSBldW0gZnVnaWF0IHF1byB2b2x1cHRhcyBudWxsYSBwYXJpYXR1cj8iCj4KCiMgVGhlcmUgaXMgbW9yZSwgYnV0IGxldCdzIHN0b3AgaGVyZS4=",
            "load_out": "\nLorem Ipsum\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \nminim veniam, quis nostrud exercitation ullamco laboris nisi ut \naliquip ex ea commodo consequat. Duis aute irure dolor in \nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \npariatur. Excepteur sint occaecat cupidatat non proident, sunt in \nculpa qui officia deserunt mollit anim id est laborum.\n\n    Sed ut perspiciatis unde omnis iste natus error sit voluptatem\naccusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae \nab illo inventore veritatis et quasi architecto beatae vitae dicta \nsunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit \naspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos \nqui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui \ndolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed \nquia non numquam eius modi tempora incidunt ut labore et dolore magnam \naliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum \nexercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex \nea commodi consequatur? Quis autem vel eum iure reprehenderit qui in \nea voluptate velit esse quam nihil molestiae consequatur, vel illum \nqui dolorem eum fugiat quo voluptas nulla pariatur?\"\n",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 25,
                "blank": 2,
                "comment": 2
            }
        },
        "reprobate": {
            "load_in": "dGhlIGJhY2tzbGFzaCBjaGFyYWN0ZXI6IFwKdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXI6ICcKdGhlIGRvdWJsZSBxdW90ZSBjaGFyYWN0ZXI6ICIKdGhlIGJlbGwgY2hhcmFjdGVyOiAHCnRoZSBiYWNrIHNwYWNlIGNoYXJhY3RlcjogCAp0aGUgZm9ybSBmZWVkIGNoYXJhY3RlcjogDAp0aGUgbGluZSBmZWVkIGNoYXJhY3RlcjogCnRoZSBjYXJyaWFnZSByZXR1cm4gY2hhcmFjdGVyOiANdGhlIGhvcml6b250YWwgdGFiIGNoYXJhY3RlcjogCQp0aGUgdmVydGljYWwgdGFiIGNoYXJhY3RlcjogCwp0aGUgZXNjYXBlIGNoYXJhY3RlcjogGwp0aGUgZGVsZXRlIGNoYXJhY3Rlcjogfwo=",
            "load_out": {
                "the backslash character": "\\",
                "the single quote character": "'",
                "the double quote character": "\"",
                "the bell character": "\u0007",
                "the back space character": "\b",
                "the form feed character": "\f",
                "the line feed character": "",
                "the carriage return character": "",
                "the horizontal tab character": "\t",
                "the vertical tab character": "\u000b",
                "the escape character": "\u001b",
                "the delete character": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 12
            }
        },
        "incision": {
            "load_in": "dGhlIGJhY2tzbGFzaCBjaGFyYWN0ZXI6IFwNCnRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyOiAnDQp0aGUgZG91YmxlIHF1b3RlIGNoYXJhY3RlcjogIg0KdGhlIGJlbGwgY2hhcmFjdGVyOiAHDQp0aGUgYmFjayBzcGFjZSBjaGFyYWN0ZXI6IAgNCnRoZSBmb3JtIGZlZWQgY2hhcmFjdGVyOiAMDQp0aGUgbGluZSBmZWVkIGNoYXJhY3RlcjogCg0KdGhlIGNhcnJpYWdlIHJldHVybiBjaGFyYWN0ZXI6IA0NCnRoZSBob3Jpem9udGFsIHRhYiBjaGFyYWN0ZXI6IAkNCnRoZSB2ZXJ0aWNhbCB0YWIgY2hhcmFjdGVyOiALDQp0aGUgZXNjYXBlIGNoYXJhY3RlcjogGw0KdGhlIGRlbGV0ZSBjaGFyYWN0ZXI6IH8NCg0K",
            "load_out": {
                "the backslash character": "\\",
                "the single quote character": "'",
                "the double quote character": "\"",
                "the bell character": "\u0007",
                "the back space character": "\b",
                "the form feed character": "\f",
                "the line feed character": "",
                "the carriage return character": "",
                "the horizontal tab character": "\t",
                "the vertical tab character": "\u000b",
                "the escape character": "\u001b",
                "the delete character": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 12,
                "blank": 3
            }
        },
        "pelvis": {
            "load_in": "dGhlIGJhY2tzbGFzaCBjaGFyYWN0ZXI6IFwNdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXI6ICcNdGhlIGRvdWJsZSBxdW90ZSBjaGFyYWN0ZXI6ICINdGhlIGJlbGwgY2hhcmFjdGVyOiAHDXRoZSBiYWNrIHNwYWNlIGNoYXJhY3RlcjogCA10aGUgZm9ybSBmZWVkIGNoYXJhY3RlcjogDA10aGUgbGluZSBmZWVkIGNoYXJhY3RlcjogCg10aGUgY2FycmlhZ2UgcmV0dXJuIGNoYXJhY3RlcjogDQ10aGUgaG9yaXpvbnRhbCB0YWIgY2hhcmFjdGVyOiAJDXRoZSB2ZXJ0aWNhbCB0YWIgY2hhcmFjdGVyOiALDXRoZSBlc2NhcGUgY2hhcmFjdGVyOiAbDXRoZSBkZWxldGUgY2hhcmFjdGVyOiB/DQ0=",
            "load_out": {
                "the backslash character": "\\",
                "the single quote character": "'",
                "the double quote character": "\"",
                "the bell character": "\u0007",
                "the back space character": "\b",
                "the form feed character": "\f",
                "the line feed character": "",
                "the carriage return character": "",
                "the horizontal tab character": "\t",
                "the vertical tab character": "\u000b",
                "the escape character": "\u001b",
                "the delete character": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 12,
                "blank": 3
            }
        },
        "pursuit": {
            "load_in": "dGhlIGJhY2tzbGFzaCBjaGFyYWN0ZXI6IFwNCnRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyOiAnDXRoZSBkb3VibGUgcXVvdGUgY2hhcmFjdGVyOiAiCnRoZSBiZWxsIGNoYXJhY3RlcjogBw0KdGhlIGJhY2sgc3BhY2UgY2hhcmFjdGVyOiAIDXRoZSBmb3JtIGZlZWQgY2hhcmFjdGVyOiAMCnRoZSBsaW5lIGZlZWQgY2hhcmFjdGVyOiAKDQp0aGUgY2FycmlhZ2UgcmV0dXJuIGNoYXJhY3RlcjogDQ10aGUgaG9yaXpvbnRhbCB0YWIgY2hhcmFjdGVyOiAJCnRoZSB2ZXJ0aWNhbCB0YWIgY2hhcmFjdGVyOiALDQp0aGUgZXNjYXBlIGNoYXJhY3RlcjogGw0KdGhlIGRlbGV0ZSBjaGFyYWN0ZXI6IH8NCg0K",
            "load_out": {
                "the backslash character": "\\",
                "the single quote character": "'",
                "the double quote character": "\"",
                "the bell character": "\u0007",
                "the back space character": "\b",
                "the form feed character": "\f",
                "the line feed character": "",
                "the carriage return character": "",
                "the horizontal tab character": "\t",
                "the vertical tab character": "\u000b",
                "the escape character": "\u001b",
                "the delete character": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 12,
                "blank": 3
            }
        },
        "beset": {
            "load_in": "bm8gbmV3bGluZXM6CiAgICA+IGxpbmUgMQogICAgPiBsaW5lIDIKbGVhZGluZyBuZXdsaW5lOgogICAgPgogICAgPiBsaW5lIDEKICAgID4gbGluZSAyCmludGVybmFsIG5ld2xpbmU6CiAgICA+IGxpbmUgMQogICAgPgogICAgPiBsaW5lIDIKdHJhaWxpbmcgbmV3bGluZToKICAgID4gbGluZSAxCiAgICA+IGxpbmUgMgogICAgPgpsZWFkaW5nLCBpbnRlcm5hbCwgYW5kIHRyYWlsaW5nIG5ld2xpbmU6CiAgICA+CiAgICA+IGxpbmUgMQogICAgPgogICAgPiBsaW5lIDIKICAgID4KbGVhZGluZyBuZXdsaW5lczoKICAgID4KICAgID4KICAgID4gbGluZSAxCiAgICA+IGxpbmUgMgppbnRlcm5hbCBuZXdsaW5lczoKICAgID4gbGluZSAxCiAgICA+CiAgICA+CiAgICA+IGxpbmUgMgp0cmFpbGluZyBuZXdsaW5lczoKICAgID4gbGluZSAxCiAgICA+IGxpbmUgMgogICAgPgogICAgPgpsZWFkaW5nLCBpbnRlcm5hbCwgYW5kIHRyYWlsaW5nIG5ld2xpbmVzOgogICAgPgogICAgPgogICAgPiBsaW5lIDEKICAgID4KICAgID4KICAgID4gbGluZSAyCiAgICA+CiAgICA+CmxlYWRpbmcgYmxhbmsgbGluZToKCiAgICA+IGxpbmUgMQogICAgPiBsaW5lIDIKaW50ZXJuYWwgYmxhbmsgbGluZToKICAgID4gbGluZSAxCgogICAgPiBsaW5lIDIKdHJhaWxpbmcgYmxhbmsgbGluZToKICAgID4gbGluZSAxCiAgICA+IGxpbmUgMgoKbGVhZGluZyBjb21tZW50OgogICMgaWdub3JlIG1lCiAgICA+IGxpbmUgMQogICAgPiBsaW5lIDIKaW50ZXJuYWwgY29tbWVudDoKICAgID4gbGluZSAxCiAgICAgICAgIyBpZ25vcmUgbWUKICAgID4gbGluZSAyCnRyYWlsaW5nIGNvbW1lbnQ6CiAgICA+IGxpbmUgMQogICAgPiBsaW5lIDIKICAjIGlnbm9yZSBtZQoKICAgICAgICAgICAgIyBpZ25vcmUgbWUKCiAgICAgICAgICAgICAgICAgICAgICAg",
            "load_out": {
                "no newlines": "line 1\nline 2",
                "leading newline": "\nline 1\nline 2",
                "internal newline": "line 1\n\nline 2",
                "trailing newline": "line 1\nline 2\n",
                "leading, internal, and trailing newline": "\nline 1\n\nline 2\n",
                "leading newlines": "\n\nline 1\nline 2",
                "internal newlines": "line 1\n\n\nline 2",
                "trailing newlines": "line 1\nline 2\n\n",
                "leading, internal, and trailing newlines": "\n\nline 1\n\n\nline 2\n\n",
                "leading blank line": "line 1\nline 2",
                "internal blank line": "line 1\nline 2",
                "trailing blank line": "line 1\nline 2",
                "leading comment": "line 1\nline 2",
                "internal comment": "line 1\nline 2",
                "trailing comment": "line 1\nline 2"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 15,
                "string item": 48,
                "blank": 6,
                "comment": 4
            }
        },
        "gendarme": {
            "load_in": "aW5ncmVkaWVudHM6CiAgPiBncmVlbiBjaGlsaWVzCiAgICA+IHJlZCBjaGlsaWVz",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "    > red chilies",
                "lineno": 2,
                "colno": 2
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "string item": 2
            }
        },
        "sketchy": {
            "load_in": "ICAgICA+IGdyZWVuIGNoaWxpZXMKICAgICA+IHJlZCBjaGlsaWVz",
            "load_out": null,
            "load_err": {
                "message": "top-level content must start in column 1.",
                "line": "     > green chilies",
                "lineno": 0,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "string item": 2
            }
        },
        "prankster": {
            "load_in": "aW5ncmVkaWVudHM6Cgk+IGdyZWVuIGNoaWxpZXMKCT4gcmVkIGNoaWxpZXM=",
            "load_out": null,
            "load_err": {
                "message": "invalid character in indentation: '\\t'.",
                "line": "\t> green chilies",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "unrecognized": 2
            }
        },
        "streamer": {
            "load_in": "aW5ncmVkaWVudHM6CiAgICAgICAgPiBncmVlbiBjaGlsaWVzCiAgICDCoCAgID4gcmVkIGNoaWxpZXMKIyAgIOKGkSB0aGlzIGlzIGEgbm9uLWJyZWFraW5nIHNwYWNl",
            "load_out": null,
            "load_err": {
                "message": "invalid character in indentation: '\\xa0' (NO-BREAK SPACE).",
                "line": "        > red chilies",
                "lineno": 2,
                "colno": 4
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "string item": 1,
                "unrecognized": 1,
                "comment": 1
            }
        },
        "guinea": {
            "load_in": "a2V5MToKa2V5Mjo=",
            "load_out": {
                "key1": "",
                "key2": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 2
            }
        },
        "dusty": {
            "load_in": "a2V5MTogCmtleTI6IA==",
            "load_out": {
                "key1": "",
                "key2": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 2
            }
        },
        "jaunt": {
            "load_in": "OiBhcHJpY290CjoKICAgID4gOA==",
            "load_out": {
                "apricot\n": "8"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 2,
                "string item": 1
            }
        },
        "abide": {
            "load_in": "OiAga2V5LWEiIDoga2V5LWInIDoga2V5LWMgCiAgICA+IHZhbHVl",
            "load_out": {
                " key-a\" : key-b' : key-c ": "value"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 1,
                "string item": 1
            }
        },
        "benchmark": {
            "load_in": "e30=",
            "load_out": {},
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "milligram": {
            "load_in": "ICAgIGtleTogdmFsdWU=",
            "load_out": null,
            "load_err": {
                "message": "top-level content must start in column 1.",
                "line": "    key: value",
                "lineno": 0,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1
            }
        },
        "fifth": {
            "load_in": "a2V5IDE6ICAKICAgICAgICAjIG5vdGljZSB0aGUgZXh0cmEgc3BhY2UgYXQgdGhlIGVuZCBvZiB0aGUgYWJvdmUgbGluZQoKICAgICAgICAjIHRoYXQsIGNvbWJpbmVkIHdpdGggdGhlIGluZGVudCBpbiB0aGUgbGluZSBiZWxvdyBpcyBhbiBlcnJvcgogICAgICAgIGtleSAyOiB2YWx1ZSAy",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "        key 2: value 2",
                "lineno": 4,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 2,
                "comment": 2,
                "blank": 1
            }
        },
        "chatterer": {
            "load_in": "IyBpbnZhbGlkIGluZGVudGF0aW9uLCB0YWIgaW4gaW5kZW50YXRpb24Ka2V5IDE6CiAgICAJICAgIGtleSAxLjE6IHZhbHVlIDEuMQo=",
            "load_out": null,
            "load_err": {
                "message": "invalid character in indentation: '\\t'.",
                "line": "    \t    key 1.1: value 1.1",
                "lineno": 2,
                "colno": 4
            },
            "encoding": "utf-8",
            "types": {
                "comment": 1,
                "dict item": 1,
                "unrecognized": 1
            }
        },
        "concuss": {
            "load_in": "aW5ncmVkaWVudHM6Ci0gZ3JlZW4gY2hpbGllcw==",
            "load_out": null,
            "load_err": {
                "message": "expected dictionary item.",
                "line": "- green chilies",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "list item": 1
            }
        },
        "marinade": {
            "load_in": "aW5ncmVkaWVudHM6CiAgLSBncmVlbiBjaGlsaWVzCiAgICAtIHJlZCBjaGlsaWVz",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "    - red chilies",
                "lineno": 2,
                "colno": 2
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "list item": 2
            }
        },
        "detract": {
            "load_in": "Y2FuZGlkYXRlczoKICAgIG5hbWU6CiAgcGhvbmU6",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation, partial dedent.",
                "line": "  phone:",
                "lineno": 2,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 3
            }
        },
        "silky": {
            "load_in": "aW5ncmVkaWVudHM6CiAgICAtIGdyZWVuIGNoaWxpZXMKICAtIHJlZCBjaGlsaWVz",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation, partial dedent.",
                "line": "  - red chilies",
                "lineno": 2,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "list item": 2
            }
        },
        "matinee": {
            "load_in": "aW5ncmVkaWVudHM6IHJlZCBjaGlsaWVzCi0gZ3JlZW4gY2hpbGllcw==",
            "load_out": null,
            "load_err": {
                "message": "expected dictionary item.",
                "line": "- green chilies",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "list item": 1
            }
        },
        "slipknot": {
            "load_in": "aW5ncmVkaWVudHM6CiAgICBncmVlbiBjaGlsaWVz",
            "load_out": null,
            "load_err": {
                "message": "unrecognized line.",
                "line": "    green chilies",
                "lineno": 1,
                "colno": 4
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "unrecognized": 1
            }
        },
        "facet": {
            "load_in": "a2V5OiB2YWx1ZSAxCmtleTogdmFsdWUgMg==",
            "load_out": null,
            "load_err": {
                "message": "duplicate key: key.",
                "line": "key: value 2",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 2
            }
        },
        "smudge": {
            "load_in": "a2V5OgogICAgCSAgICA+IGZpcnN0IGxpbmUKICAgIAkgICAgPiBzZWNvbmQgbGluZQ==",
            "load_out": null,
            "load_err": {
                "message": "invalid character in indentation: '\\t'.",
                "line": "    \t    > first line",
                "lineno": 1,
                "colno": 4
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "unrecognized": 2
            }
        },
        "spindly": {
            "load_in": "a2V5Ojo=",
            "load_out": {
                "key:": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 1
            }
        },
        "charter": {
            "load_in": "OgogICAgPgp+IUAjJCVeJiooKV8rLTEyMzQ1Njc4OTB7fVtdfDs8Pj8sLi86IH4hQCMkJV4mKigpXystMTIzNDU2Nzg5MHt9W118Ojs8Pj8sLi8KOiAtIGtleSAzCiAgICA+IC0gdmFsdWUgMwo6IGtleSA0OiAKICAgID4gdmFsdWUgNDogCjogPiBrZXkgNQogICAgPiA+IHZhbHVlIDUKOiAjIGtleSA2CiAgICA+ICN2YWx1ZSA2CjogOiBrZXkgNwogICAgPiA6IHZhbHVlIDcKIiBrZXkgOCAiOiAiIHZhbHVlIDggIgonIGtleSA5ICc6ICcgdmFsdWUgOSAnCmtleSAxMDogdmFsdWUgJyIgMTAKa2V5IDExOiBBbmQgRnJlZCBzYWlkICd5YWJiYSBkYWJiYSBkb28hJyB0byBCYXJuZXkuCmtleSAiIDEyOiB2YWx1ZSAnIDEyCiTigqzCpcKj4oKp4oK64oK94oK5yYPOnsiEOiAk4oKswqXCo+KCqeKCuuKCveKCucmDzp7IhApZWkVQVEdNS2tfY211wrXOvG5wZmF6eTogWVpFUFRHTUtrX2NtdcK1zrxucGZhenkKYS16QS1aJeKImnt1c317Y3VyfV1bLV4vKCnCt+KBu+KBsMK5wrLCs+KBtOKBteKBtuKBt+KBuOKBucKww4XOqcax4oSm4oSnOiBhLXpBLVol4oiae3VzfXtjdXJ9XVstXi8oKcK34oG74oGwwrnCssKz4oG04oG14oG24oG34oG44oG5wrDDhc6pxrHihKbihKc=",
            "load_out": {
                "": "",
                "~!@#$%^&*()_+-1234567890{}[]|;<>?,./": "~!@#$%^&*()_+-1234567890{}[]|:;<>?,./",
                "- key 3": "- value 3",
                "key 4: ": "value 4: ",
                "> key 5": "> value 5",
                "# key 6": "#value 6",
                ": key 7": ": value 7",
                "\" key 8 \"": "\" value 8 \"",
                "' key 9 '": "' value 9 '",
                "key 10": "value '\" 10",
                "key 11": "And Fred said 'yabba dabba doo!' to Barney.",
                "key \" 12": "value ' 12",
                "$€¥£₩₺₽₹ɃΞȄ": "$€¥£₩₺₽₹ɃΞȄ",
                "YZEPTGMKk_cmuµμnpfazy": "YZEPTGMKk_cmuµμnpfazy",
                "a-zA-Z%√{us}{cur}][-^/()·⁻⁰¹²³⁴⁵⁶⁷⁸⁹°ÅΩƱΩ℧": "a-zA-Z%√{us}{cur}][-^/()·⁻⁰¹²³⁴⁵⁶⁷⁸⁹°ÅΩƱΩ℧"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 6,
                "string item": 6,
                "dict item": 9
            }
        },
        "patchy": {
            "load_in": "a2V5IDE6IHZhbHVlIDEKa2V5JyIyOiB2YWx1ZSAy",
            "load_out": {
                "key 1": "value 1",
                "key'\"2": "value 2"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 2
            }
        },
        "excuse": {
            "load_in": "azE6IHYxCmsyIDogdjIKazMgIDogdjMKazQJOiB2NA==",
            "load_out": {
                "k1": "v1",
                "k2": "v2",
                "k3": "v3",
                "k4": "v4"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 4
            }
        },
        "sandstorm": {
            "load_in": "LSM6Jz46IC0jOiI+OgotIzoiPjogLSM6Jz46Ci0jJyc+OjogLSMiIj46OgotIyIiPjo6IC0jJyc+OjoKICAgICMgaW5kZW50ZWQgY29tbWVudAo6LSM6Jz46IDotIzoiPjoKOi0jOiI+OiA6LSM6Jz46CjotIycnPjo6IDotIyIiPjo6CjotIyIiPjo6IDotIycnPjo6CiAgICAgICAgIyBpbmRlbnRlZCBjb21tZW50Cj46LSM6Jz46ID46LSM6Ij46Cj46LSM6Ij46ID46LSM6Jz46Cj46LSMnJz46OiA+Oi0jIiI+OjoKPjotIyIiPjo6ID46LSMnJz46Og==",
            "load_out": {
                "-#:'>": "-#:\">:",
                "-#:\">": "-#:'>:",
                "-#''>:": "-#\"\">::",
                "-#\"\">:": "-#''>::",
                ":-#:'>": ":-#:\">:",
                ":-#:\">": ":-#:'>:",
                ":-#''>:": ":-#\"\">::",
                ":-#\"\">:": ":-#''>::",
                ">:-#:'>": ">:-#:\">:",
                ">:-#:\">": ">:-#:'>:",
                ">:-#''>:": ">:-#\"\">::",
                ">:-#\"\">:": ">:-#''>::"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 12,
                "comment": 2
            }
        },
        "shard": {
            "load_in": "J2E6ICc6IGE6CjogJ2I6IAogICAgPiAnOiBiOg==",
            "load_out": {
                "'a": "': a:",
                "'b: ": "': b:"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "key item": 1,
                "string item": 1
            }
        },
        "beach": {
            "load_in": "OiBUaGlzIGlzIGEga2V5IHRoYXQgaXMKOiBzcHJlYWQgb3ZlciBtdWx0aXBsZSBsaW5lcy4KOiBMaWtlIG5vcm1hbCBtdWx0aWxpbmUgc3RyaW5ncywKOiBpdCBjYW4gY29udGFpbiBhbnkgY2hhcmFjdGVyCjogd2l0aG91dCByZXN0cmljdGlvbi4KICAgID4gVGhpcyBpcyBpdHMgdmFsdWUKCjogSGVyZSBpcyBhbm90aGVyIG11bHRpbGluZSBrZXkuCjogQnV0IGluIHRoaXMgY2FzZSBpdCBoYXMgYW4gZW1wdHkgdmFsdWUuCiAgICA+Cgo6IFRoaXMgaXMgYW5vdGhlciBtdWx0aWxpbmUga2V5LAo6IHRoaXMgb25lIHdpdGggYSBtdWx0aWxpbmUgdmFsdWUuCiAgICA+IEhlcmUgaXMgdGhlIG11bHRpbGluZSB2YWx1ZS4KICAgID4gSXQgaXMgcGFpcmVkIHdpdGggYSBtdWx0aWxpbmUga2V5LgoKaGVyZSBpcyBhIHNpbXBsZSBrZXk6IHdpdGggYSBzaW1wbGUgdmFsdWUKCjogSGVyZSBpcyBhIG11bHRpbGluZSBrZXkKOiB3aXRoIGEgbGlzdCB2YWx1ZS4KICAgIC0gMAogICAgLSAxCgo6IEhlcmUgaXMgYSBtdWx0aWxpbmUga2V5Cjogd2l0aCBhIGRpY3Rpb25hcnkgdmFsdWUuCiAgICBhOiBhCiAgICBiOiBiCgpoZXJlIGlzIGFub3RoZXIgc2ltcGxlIGtleTogd2l0aCBhbm90aGVyIHNpbXBsZSB2YWx1ZQoKOiBoZXJlIGlzIGEgbXVsdGlsaW5lIGtleTogdGhhdCBraW5kIG9mIGxvb2tzIGEgZGljdCBpdGVtCiAgICA+IGEgbXVsdGlsaW5lIHZhbHVlCgo6IFRoaXMgaXMgYW5vdGhlciBtdWx0aWxpbmUga2V5LAo6IHRoaXMgb25lIHdpdGggYSBkaWN0aW9uYXJ5IGFzIGEgdmFsdWUgdGhhdCBoYXMgYSBtdWx0aWxpbmUga2V5LgogICAgOiBUaGlzIGlzIGFub3RoZXIgbXVsdGlsaW5lIGtleSwKICAgIDogdGhpcyBvbmUgd2l0aCBhIG11bHRpbGluZSB2YWx1ZS4KICAgICAgICA+IEhlcmUgaXMgdGhlIG11bHRpbGluZSB2YWx1ZS4KICAgICAgICA+IEl0IGlzIHBhaXJlZCB3aXRoIGEgbXVsdGlsaW5lIGtleS4KCjogVGhpcyBhIG11bHRpbGluZSBrZXkgd2l0aCBhIGJsYW5rIHNlY29uZCBsaW5lLgo6CiAgICA+IHlhYmJhIGRhYmJhIGRvbw==",
            "load_out": {
                "This is a key that is\nspread over multiple lines.\nLike normal multiline strings,\nit can contain any character\nwithout restriction.": "This is its value",
                "Here is another multiline key.\nBut in this case it has an empty value.": "",
                "This is another multiline key,\nthis one with a multiline value.": "Here is the multiline value.\nIt is paired with a multiline key.",
                "here is a simple key": "with a simple value",
                "Here is a multiline key\nwith a list value.": [
                    "0",
                    "1"
                ],
                "Here is a multiline key\nwith a dictionary value.": {
                    "a": "a",
                    "b": "b"
                },
                "here is another simple key": "with another simple value",
                "here is a multiline key: that kind of looks a dict item": "a multiline value",
                "This is another multiline key,\nthis one with a dictionary as a value that has a multiline key.": {
                    "This is another multiline key,\nthis one with a multiline value.": "Here is the multiline value.\nIt is paired with a multiline key."
                },
                "This a multiline key with a blank second line.\n": "yabba dabba doo"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 20,
                "string item": 8,
                "blank": 9,
                "dict item": 4,
                "list item": 2
            }
        },
        "crumbly": {
            "load_in": "QSA6CiA6IEI6CiAgPgo6IEMgOgogPgpEIDoKOiBFCiA+CjogRjEKOiBGMgogPg==",
            "load_out": {
                "A": {
                    "B:": ""
                },
                "C :": "",
                "D": "",
                "E": "",
                "F1\nF2": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 2,
                "key item": 5,
                "string item": 4
            }
        },
        "despair": {
            "load_in": "QSA6CiA6IEI6CjogQyA6CkQgOgo6IEU=",
            "load_out": null,
            "load_err": {
                "message": "multiline key requires a value.",
                "line": " : B:",
                "lineno": 1,
                "colno": 1
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 2,
                "key item": 3
            }
        },
        "doodle": {
            "load_in": "",
            "load_out": {
                "tether": {
                    "disclose": "paranoid clunk gaggle",
                    "prolong": "stove banish",
                    "navel": "-clipboard organist signify",
                    "crane": "-washout honey guarantor=aircrew",
                    "inure": "fondle = 10kΩ*dissect"
                },
                "majesty": {
                    "fatten": "washbowl flagon gentile hairstyle",
                    "static": "lender busby",
                    "niece": "-humpback adduce ferryboat",
                    "reservoir": "-dally idiot enlarge=avalanche",
                    "wally": "divorcee = 10kΩ*fugue"
                },
                "banner": {
                    "scepter": "trollop living giddy",
                    "lager": "piper glacier",
                    "debunk": "-trapeze person matron",
                    "pecan": "-uncanny perform megaton=profiteer",
                    "register": "answer = 10kΩ*trend"
                },
                "monolith": {
                    "partitive": "bookie outcome buckskin",
                    "roller": "pixie fraud",
                    "change": "scullery-roach rubber reveal+payoff",
                    "simulator": "smock fritter consign=chateau",
                    "narrow": "betrothal = 10kΩ*trooper - landau"
                },
                "reinstate": {
                    "dramatist": "pasture glade enslave upright",
                    "kinky": "deuce birdie",
                    "bathroom": "people-layoff fluke flood+sonata",
                    "heart": "loiter feature scamper=drivel",
                    "vendetta": "nauseate = 10kΩ*hoodlum - signboard"
                },
                "overstate": {
                    "deter": "clitoris treachery reading",
                    "saddlebag": "doodle enunciate",
                    "cherub": "cupboard-shingle refuge reefer+animate",
                    "overcome": "gasometer crease bazooka=thriller",
                    "poplar": "centipede = 10kΩ*headman - dewlap"
                },
                "[testament:blight] spangle": {
                    "otter": "adherent disguise electrode biplane",
                    "stormy": "curfew neuter",
                    "spaceman": "addict = snowman*(anxiety+embitter)*bayonet kestrel liken",
                    "hardy thinner": "'pretend",
                    "belief": "sphere",
                    "sachet": "fortnight: twitch(hopper) rebut duodenum=bottom; pleat=onward.\nfrizz: galley(genealogy) advantage whelk=-sprawl; waist=-immigrant."
                },
                "[mongrel:sequester] prism": {
                    "bairn": "easterner racketeer shortfall bootlace amoeba",
                    "canopy": "refuse profit",
                    "snuggle": "baritone = scrounger*(supplier+clobber)*flutter agate simplify",
                    "edition industry": "'castle",
                    "tenth": "rhyme",
                    "scrunch": "ledge: exporter(wrongdoer) levitate daiquiri=subsidize; bulletin=reason.\njackpot: butcher(frequent) medicine memento=-diaphragm; ointment=-raving."
                },
                "[frogman:alleyway] fatigue": {
                    "hyena": "believer timepiece infuriate sixty",
                    "cache": "bootee scoopful",
                    "laborer": "egoist = lunatic*(obeisance+voice)*gambit nickel queer",
                    "scraggy doggie": "'cedar",
                    "requisite": "pastor",
                    "teacher": "toboggan: champion(dominion) adieu golfer=linen; divorce=stake.\nfireguard: vineyard(confide) seashore diddle=-dartboard; genuflect=-fidget."
                },
                "install": {
                    "abide": "waistline",
                    "skunk": "coarsen nuisance",
                    "briar": "eviction = glide && !reliquary overfeed resent",
                    "magnum accident": "'quince",
                    "nightmare": "cheapen"
                },
                "withdraw": {
                    "chalice": "noble canard",
                    "siphon": "utility overhead",
                    "butler": "aspirin.starlet < heater < brace.blockade",
                    "juggler": "crumpet = sunny + slattern + persuade. cataclysm = scolding.",
                    "betake": "projector.insulator",
                    "hearth": "convector"
                },
                "surgery": {
                    "sunbathe": "decathlon",
                    "fixation": "heighten watcher",
                    "stretchy": "-washday < burnish < debrief",
                    "scabbard": "reward"
                },
                "intercede barony": {
                    "busker": "yachtsman-fleshpot sandbag flummox",
                    "vestry": "panorama",
                    "sanction": "drench=\"%keyboard\""
                },
                "harmony creaky": {
                    "physicist": "gauge-doublet bungalow clink",
                    "swerve": "cleanser",
                    "royalty": "essay=\"%honeymoon\";\nextol = \"swampy\";\nalmshouse = \"\"."
                },
                "caterwaul imitation": {
                    "dunce": "bodice sitcom chipmunk",
                    "profane": "monocle",
                    "sortie": "impute=\"%covert\""
                },
                "menace": {
                    "dredge": "miasma litigant broil",
                    "bishop": "medley",
                    "inquest": "scourer=\"%gamma\"; mesmerize='ballcock"
                },
                "mattock": {
                    "taint": "buttery combatant stalwart",
                    "oculist": "implicate",
                    "support": "closure='snake; phoenix=\"%smoothie\""
                },
                "chance": {
                    "riposte": "crusade",
                    "scripture": "cathode",
                    "doorstep": "dukedom=screening; lifebuoy=\"%crackle\"",
                    "salesman": "shimmer cobweb spool=butter."
                },
                "asset": {
                    "overthrow": "dainty",
                    "chancy": "bough psychotic",
                    "sultana": "father hormone caliber=mayday."
                },
                "pollinate": {
                    "doctor": "masochist",
                    "strangler": "saloon ensemble shower",
                    "tuxedo": "inject='strategy;\npurport={toffee,ripper}.",
                    "citadel": "shrew repellent dairymaid=laser; elevator=biped.\nresound garage mistreat=rebuild; scree=choke.\nanchor begrudge slalom=reassert; molester=chopper.\ndizzy outbreak snifter=tussle; remove=survive.\nnoodle panegyric importune=native; accredit=loser."
                },
                "acquit invest gravity": {
                    "remain": "beetroot maroon cliche ninety",
                    "bookmark": "munch",
                    "commodore": "plank=sundry;\nprick=rehear;\nbonnet=\"banana\"",
                    "transfer": "blister project adjective=slinky; uncover=salty.\nbowler acquiesce nobody=syllabus; bushy=fossilize."
                },
                "horror megalith": {
                    "spurt": "flower towpath rejoicing dowry rupture",
                    "recur": "capacity",
                    "tract": "goatee='graze;\nliqueur=\"scream\";\ndetain=prefigure;\nspill={eggplant,poach}",
                    "plunger": "cutting dislocate prince=spongy; flirt=debut.\nneurone cricketer shredder=property; break=octagon; plutocrat=lapwing.\nsofty expert tycoon=qualify; coachman=heretic.\nredwood notebook heath=blackjack; frump=washstand.\nloose keeper applaud=destroyer; intention=hymnal.\npotentate brasserie souvenir=tumor; masseur=hasten.\nsanctify report touchdown=afford; combat=impart.\nbrute elder bisexual=penknife; treadmill=thesaurus.\ntissue sickly dimmer=dowdy; cylinder=actor.\nawakening robotic fascia=paperboy; scalp=length; seashell=50μA.\nlarch fashion crack=scorpion; explicate=retire.\nmature lapel incline=dressing; thwack=rivet.\nneologism phonetic zebra=upstage; realtor=showpiece.\nevacuee stride softener=ditty; earth=bookcase.\nuproot cross titter=constrict; specific=wayside.\noverwrite overshoot quandary=panther; cartwheel=ratio."
                },
                "informer payroll": {
                    "sequin": "armadillo exclaim foray cuckoo",
                    "lynch": "punchbowl",
                    "trump": "bedeck=quota;\nmachete=croupier;\nalpine=\"response\";\nvegetable=slowdown.",
                    "whisker": "lottery sheath moonlight=chamber.\nfantasize pullover stool=eject."
                },
                "barbarity, allude, whittle": {
                    "militant": "garret dictate sweeper",
                    "extension": "senator",
                    "justify": "taxicab=ferry;\nparagraph=spokesman;\npolitic=codpiece;\ngrizzle=clerk;\nperturb=mudguard;\ndecade=\"sickness\"",
                    "broad": "ceramic morsel sahib=gelding.\ngravy shoddy fixative=scramble.\nsmelt beatnik describe=duckling.\nbourbon crusader tabloid=wordy."
                },
                "extenuate, promoter": {
                    "store": "treasury dumpling emotion skirmish",
                    "epitaph": "incumbent",
                    "yearning": "adjudge='yearbook;\nmaneuver=\"infer\";\ncabaret=deception;\nhostel={fossil,diagnose}",
                    "sporran": "alphabet counter haughty=ceiling; treadle=reedy.\nhierarchy hardship troll=detractor; holocaust=deafen; gangway=translate.\nthought termite limousine=hustle; tweed=majorette.\nbatten swindler parkland=outsider; crawl=prevail.\nprovision fabric indict=amaze; weight=commando.\nextend cabal charge=admit; umlaut=steel.\nstrength councilor entity=address; encamp=slake.\ntrespass soapbox knoll=befriend; aggregate=allusion.\nsequel fingertip billfold=staunch; particle=combine.\nsediment intellect organizer=blurry; fatty=beard; revel=50μA.\ntoxin steak panacea=elite; scavenge=acoustic.\nfarmyard resign presage=peasant; jumble=regret.\nberry valet alchemist=greasy; clonk=eyesore.\ntreat temper antenatal=interlink; hurtle=catchy.\nobtain seaweed offender=cameo; jostle=reprove.\nrigidity radish braise=scoot; petty=marquee."
                },
                "menage, quail": {
                    "outspread": "share pinion fruitcake portend",
                    "reference": "appendix",
                    "daily": "scrapbook=rejoin;\ndrier=agonize;\nsewer=\"dollop\";\nbistro=ratepayer.",
                    "flabby": "pentagon rotor science=besiege.\nspider distance shaggy=mayor.\nstatement venture priory=seance.\nsextet riddle shabby=stationer."
                },
                "jelly, exude": {
                    "naught": "misread sandbank speculate",
                    "espresso": "dispel",
                    "oilman": "amalgam=additive;\ntatty=unsettle;\nlousy=\"clamber\";\nradiator = \"paring, anatomist\";\nsidle=thatch.",
                    "episode": "council whiplash muscle=carriage.\nbaseline nymph tantrum=spoof; prognosis=trundle; friend=plump.comedy.\ninduct tubby compost=crank.\nfamily stately expunge=echelon."
                },
                "holding, scruple": {
                    "ramrod": "tableau beret",
                    "flatten": "tributary",
                    "cobra": "hunchback=bumpy;\nlorry=\"inkling\";\nholler = \"pedant, lifeboat\";\nbutchery=antique.",
                    "decree": "embroil numskull stigma=explosion.\ngrand bonus accord=scarf.\namplifier prattle submerge=justice.\ngrace arrowhead athlete=shaver."
                }
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 146,
                "blank": 27,
                "key item": 3,
                "string item": 102
            }
        },
        "imbibe": {
            "load_in": "OiB7aHR0cDovL3d3dy5rZGUub3JnL3N0YW5kYXJkcy9rY2ZnLzEuMH1rY2ZnZmlsZQogICAgPgo6IHtodHRwOi8vd3d3LmtkZS5vcmcvc3RhbmRhcmRzL2tjZmcvMS4wfWdyb3VwCiAgICA6IHtodHRwOi8vd3d3LmtkZS5vcmcvc3RhbmRhcmRzL2tjZmcvMS4wfWVudHJ5CiAgICAgICAgLQogICAgICAgICAgICA6IHtodHRwOi8vd3d3LmtkZS5vcmcvc3RhbmRhcmRzL2tjZmcvMS4wfWRlZmF1bHQKICAgICAgICAgICAgICAgID4gMjUwCiAgICAgICAgLQogICAgICAgICAgICA6IHtodHRwOi8vd3d3LmtkZS5vcmcvc3RhbmRhcmRzL2tjZmcvMS4wfWRlZmF1bHQKICAgICAgICAgICAgICAgID4ga3J1bm5lcix5YWt1YWtl",
            "load_out": {
                "{http://www.kde.org/standards/kcfg/1.0}kcfgfile": "",
                "{http://www.kde.org/standards/kcfg/1.0}group": {
                    "{http://www.kde.org/standards/kcfg/1.0}entry": [
                        {
                            "{http://www.kde.org/standards/kcfg/1.0}default": "250"
                        },
                        {
                            "{http://www.kde.org/standards/kcfg/1.0}default": "krunner,yakuake"
                        }
                    ]
                }
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "key item": 5,
                "string item": 3,
                "list item": 2
            }
        },
        "emollient": {
            "load_in": "a2V5OiB2YWx1ZSAxCmtleTogdmFsdWUgMgprZXk6IHZhbHVlIDM=",
            "load_out": null,
            "load_err": {
                "message": "duplicate key: key.",
                "line": "key: value 2",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 3
            }
        },
        "modernize": {
            "load_in": "LQogICAge30KLQogICAgezp9Ci0KICAgIHthOjB9Ci0KICAgIHthOiBrfQotCiAgICB7YTpbXX0KLQogICAge2E6IFtiXX0KLQogICAge2E6e319Ci0KICAgIHthOiB7YjoxfX0KLQogICAge2E6MCwgYjoxfQotCiAgICB7YTp7QTowfSwgYjp7QjoxfX0KLQogICAgeyBhIDogeyBBIDogMCB9ICwgYiA6IHsgQiA6IDEgfSB9ICAgCi0KICAgIHthOlsxLDIsM10sIGI6WzQsNSw2XX0KLQogICAge2E6MCxiOjF9Ci0KICAgIHthOltdLGI6W119Ci0KICAgIHthOlswLDFdLGI6WzIsM119Ci0KICAgIHthOnt9LGI6e319Ci0KICAgIHthOntiOjAsYzoxfSxkOntlOjIsZjozfX0KLQogICAge2E6MCxiOltdfQotCiAgICB7YTpbXSxiOnt9fQotCiAgICB7YTp7fSxiOjB9Ci0KICAgIHsgYTowfQotCiAgICB7YSA6MH0KLQogICAge2E6IDB9Ci0KICAgIHthOjAgfQotCiAgICB7IGEgOiAwIH0KLQogICAge2E6MCwgYjoxfQotCiAgICB7YTowICxiOjF9Ci0KICAgIHthOjAgLCBiOjF9Ci0KICAgIHtrZXkgMTp2YWx1ZSAxLCBrZXkgMiA6IHZhbHVlIDIgfQ==",
            "load_out": [
                {},
                {
                    "": ""
                },
                {
                    "a": "0"
                },
                {
                    "a": "k"
                },
                {
                    "a": []
                },
                {
                    "a": [
                        "b"
                    ]
                },
                {
                    "a": {}
                },
                {
                    "a": {
                        "b": "1"
                    }
                },
                {
                    "a": "0",
                    "b": "1"
                },
                {
                    "a": {
                        "A": "0"
                    },
                    "b": {
                        "B": "1"
                    }
                },
                {
                    "a": {
                        "A": "0"
                    },
                    "b": {
                        "B": "1"
                    }
                },
                {
                    "a": [
                        "1",
                        "2",
                        "3"
                    ],
                    "b": [
                        "4",
                        "5",
                        "6"
                    ]
                },
                {
                    "a": "0",
                    "b": "1"
                },
                {
                    "a": [],
                    "b": []
                },
                {
                    "a": [
                        "0",
                        "1"
                    ],
                    "b": [
                        "2",
                        "3"
                    ]
                },
                {
                    "a": {},
                    "b": {}
                },
                {
                    "a": {
                        "b": "0",
                        "c": "1"
                    },
                    "d": {
                        "e": "2",
                        "f": "3"
                    }
                },
                {
                    "a": "0",
                    "b": []
                },
                {
                    "a": [],
                    "b": {}
                },
                {
                    "a": {},
                    "b": "0"
                },
                {
                    "a": "0"
                },
                {
                    "a": "0"
                },
                {
                    "a": "0"
                },
                {
                    "a": "0"
                },
                {
                    "a": "0"
                },
                {
                    "a": "0",
                    "b": "1"
                },
                {
                    "a": "0",
                    "b": "1"
                },
                {
                    "a": "0",
                    "b": "1"
                },
                {
                    "key 1": "value 1",
                    "key 2": "value 2"
                }
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 29,
                "inline dict": 29
            }
        },
        "baptism": {
            "load_in": "LQogICAge2F9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘}’.",
                "line": "    {a}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "collate": {
            "load_in": "LQogICAgew==",
            "load_out": null,
            "load_err": {
                "message": "line ended without closing delimiter.",
                "line": "    {",
                "lineno": 1,
                "colno": 5
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "ballroom": {
            "load_in": "LQogICAge3t9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘{’.",
                "line": "    {{}",
                "lineno": 1,
                "colno": 5
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "mercy": {
            "load_in": "LQogICAge319",
            "load_out": null,
            "load_err": {
                "message": "extra character after closing delimiter: ‘}’.",
                "line": "    {}}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "canto": {
            "load_in": "LQogICAge2EsOmJ9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘,’.",
                "line": "    {a,:b}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "stooge": {
            "load_in": "LQogICAge2EsOmJ9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘,’.",
                "line": "    {a,:b}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "cowboy": {
            "load_in": "LQogICAge2EsOmJ9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘,’.",
                "line": "    {a,:b}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "criterion": {
            "load_in": "LQogICAge2F9OmJ9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘}’.",
                "line": "    {a}:b}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "protrude": {
            "load_in": "LQogICAge2FbOmJ9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘[’.",
                "line": "    {a[:b}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "caftan": {
            "load_in": "LQogICAge2FdOmJ9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘]’.",
                "line": "    {a]:b}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "siphon": {
            "load_in": "LQogICAge2E6Ynt9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘,’ or ‘}’, found ‘{’.",
                "line": "    {a:b{}",
                "lineno": 1,
                "colno": 8
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "unpick": {
            "load_in": "LQogICAge2E6Yn19",
            "load_out": null,
            "load_err": {
                "message": "extra character after closing delimiter: ‘}’.",
                "line": "    {a:b}}",
                "lineno": 1,
                "colno": 9
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "patchwork": {
            "load_in": "LQogICAge2E6Ylt9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘,’ or ‘}’, found ‘[’.",
                "line": "    {a:b[}",
                "lineno": 1,
                "colno": 8
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "frustrate": {
            "load_in": "LQogICAge2E6Yl19",
            "load_out": null,
            "load_err": {
                "message": "expected ‘,’ or ‘}’, found ‘]’.",
                "line": "    {a:b]}",
                "lineno": 1,
                "colno": 8
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "donation": {
            "load_in": "LQogICAge2E6MCwgLCB9",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘,’.",
                "line": "    {a:0, , }",
                "lineno": 1,
                "colno": 10
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "flaunt": {
            "load_in": "LQogICAge2E6e0E6MH0sIGJ7QjoxfX0=",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘{’.",
                "line": "    {a:{A:0}, b{B:1}}",
                "lineno": 1,
                "colno": 15
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline dict": 1
            }
        },
        "magnetize": {
            "load_in": "e2E6IHtiOjAsIGM6MX0sIGQ6IHtlOjIsIGY6M319",
            "load_out": {
                "a": {
                    "b": "0",
                    "c": "1"
                },
                "d": {
                    "e": "2",
                    "f": "3"
                }
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "succor": {
            "load_in": "a2V5IDE6CiAgICAgICAge2sxLjE6djEuMSwJICBrMS4yOnYxLjIsICAgICAgCWsxLjM6djEuMwl9CQprZXkgMjoKICAgICAgICB7azIuMQk6djIuMSwJICBrMi4yCTp2Mi4yLCAgICAgIAlrMi4zCTp2Mi4zCX0JCmtleSAzOgogICAgICAgIHtrMy4xOgl2My4xLAkgIGszLjI6CXYzLjIsICAgICAgCWszLjM6CXYzLjMJfQkKa2V5IDQ6CiAgICAgICAge2s0LjEJOgl2NC4xLAkgIGs0LjIJOgl2NC4yLCAgICAgIAlrNC4zCToJdjQuMwl9CQ==",
            "load_out": {
                "key 1": {
                    "k1.1": "v1.1",
                    "k1.2": "v1.2",
                    "k1.3": "v1.3"
                },
                "key 2": {
                    "k2.1": "v2.1",
                    "k2.2": "v2.2",
                    "k2.3": "v2.3"
                },
                "key 3": {
                    "k3.1": "v3.1",
                    "k3.2": "v3.2",
                    "k3.3": "v3.3"
                },
                "key 4": {
                    "k4.1": "v4.1",
                    "k4.2": "v4.2",
                    "k4.3": "v4.3"
                }
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 4,
                "inline dict": 4
            }
        },
        "raven": {
            "load_in": "a2V5IDE6CiAgICAgICB7azEuMTp2MS4xLAkgIGsxLjI6djEuMiwgICAgICAJazEuMzp2MS4zLAl9CQprZXkgMjoKICAgICAgICB7azIuMQk6djIuMSwJICBrMi4yCTp2Mi4yLCAgICAgIAlrMi4zCTp2Mi4zLAl9CQprZXkgMzoKICAgICAgICB7azMuMToJdjMuMSwJICBrMy4yOgl2My4yLCAgICAgIAlrMy4zOgl2My4zLAl9CQprZXkgNDoKICAgICAgICB7azQuMQk6CXY0LjEsCSAgazQuMgk6CXY0LjIsICAgICAgCWs0LjMJOgl2NC4zLAl9CQ==",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘}’.",
                "line": "       {k1.1:v1.1,\t  k1.2:v1.2,      \tk1.3:v1.3,\t}\t",
                "lineno": 1,
                "colno": 49
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 4,
                "inline dict": 4
            }
        },
        "emanate": {
            "load_in": "e2E6MCx9",
            "load_out": null,
            "load_err": {
                "message": "expected value.",
                "line": "{a:0,}",
                "lineno": 0,
                "colno": 5
            },
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "moonlight": {
            "load_in": "e2E6MCwgfQ==",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘}’.",
                "line": "{a:0, }",
                "lineno": 0,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "conclude": {
            "load_in": "e2E6MCw6LH0=",
            "load_out": null,
            "load_err": {
                "message": "expected value.",
                "line": "{a:0,:,}",
                "lineno": 0,
                "colno": 7
            },
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "prairie": {
            "load_in": "e2Nhc2VzOiB7Kjogeyo6IHsqOip9fX19CmNoZWNrczogKi5zdg==",
            "load_out": null,
            "load_err": {
                "message": "extra content.",
                "line": "checks: *.sv",
                "lineno": 1
            },
            "encoding": "utf-8",
            "types": {
                "inline dict": 1,
                "dict item": 1
            }
        },
        "botch": {
            "load_in": "W10KbnV0ejogdHJ1Y2s=",
            "load_out": null,
            "load_err": {
                "message": "extra content.",
                "line": "nutz: truck",
                "lineno": 1
            },
            "encoding": "utf-8",
            "types": {
                "inline list": 1,
                "dict item": 1
            }
        },
        "typhoon": {
            "load_in": "e2Nhc2VzOiB7Kjogeyo6IHsqOip9fX19CmNoZWNrczogKi5zdg==",
            "load_out": null,
            "load_err": {
                "message": "extra content.",
                "line": "checks: *.sv",
                "lineno": 1
            },
            "encoding": "utf-8",
            "types": {
                "inline dict": 1,
                "dict item": 1
            }
        },
        "revolver": {
            "load_in": "LQot",
            "load_out": [
                "",
                ""
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 2
            }
        },
        "denigrate": {
            "load_in": "LSBBCi0gQgotIEMKLQogICAgLSBEMQogICAgLSBEMgotIEU=",
            "load_out": [
                "A",
                "B",
                "C",
                [
                    "D1",
                    "D2"
                ],
                "E"
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 7
            }
        },
        "isometric": {
            "load_in": "W10=",
            "load_out": [],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline list": 1
            }
        },
        "seller": {
            "load_in": "aW5ncmVkaWVudHM6CiAgLSBncmVlbiBjaGlsaWVzCiAgY2Fubm90IG1peCBsaXN0IHdpdGg6IGRpY3Rpb25hcnkK",
            "load_out": null,
            "load_err": {
                "message": "expected list item.",
                "line": "  cannot mix list with: dictionary",
                "lineno": 2,
                "colno": 2
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 2,
                "list item": 1
            }
        },
        "element": {
            "load_in": "CiAgICAtIGdyZWVuIGNoaWxpZXMKCi0gcmVkIGNoaWxpZXMK",
            "load_out": null,
            "load_err": {
                "message": "top-level content must start in column 1.",
                "line": "    - green chilies",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "blank": 2,
                "list item": 2
            }
        },
        "twelve": {
            "load_in": "LSBncmVlbiBjaGlsaWVzCiAgICAtIHJlZCBjaGlsaWVzCg==",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "    - red chilies",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "list item": 2
            }
        },
        "derelict": {
            "load_in": "IyB0aGlzIGlzIGFuIGVycm9yIGJlY2F1c2UgaW5kZW50YXRpb24gaXMgYSB0YWIKLSAKCS0gcmVkIGNoaWxpZXM=",
            "load_out": null,
            "load_err": {
                "message": "invalid character in indentation: '\\t'.",
                "line": "\t- red chilies",
                "lineno": 2,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "comment": 1,
                "list item": 1,
                "unrecognized": 1
            }
        },
        "handbook": {
            "load_in": "LSA6Ci0gfiFAIyQlXiYqKClfKy0xMjM0NTY3ODkwe31bXXw6Ozw+PywuLwotIC0gdmFsdWUgMwotICcgOiB2YWx1ZSA0OicKLSA+IHZhbHVlIDUKLSAjdmFsdWUgNgotIGtleSA3JyA6IDogdmFsdWUgNwotICIgdmFsdWUgOCAiCi0gJyB2YWx1ZSA5ICcKLQogID4gdmFsdWUgJyIgMTAKLSBBbmQgRnJlZCBzYWlkICd5YWJiYSBkYWJiYSBkb28hJyB0byBCYXJuZXku",
            "load_out": [
                ":",
                "~!@#$%^&*()_+-1234567890{}[]|:;<>?,./",
                "- value 3",
                "' : value 4:'",
                "> value 5",
                "#value 6",
                "key 7' : : value 7",
                "\" value 8 \"",
                "' value 9 '",
                "value '\" 10",
                "And Fred said 'yabba dabba doo!' to Barney."
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 11,
                "string item": 1
            }
        },
        "epoch": {
            "load_in": "LQogICAgW10KLQogICAgWyBdCi0KICAgIFssXQotCiAgICBbYV0KLQogICAgWzpdCi0KICAgIFtbXV0KLQogICAgW1sgXV0KLQogICAgW1thXV0KLQogICAgW3t9XQotCiAgICBbe2E6MH1dCi0KICAgIFthLGJdCi0KICAgIFssLF0KLQogICAgW1tdLFtdXQotCiAgICBbW10sWyBdXQotCiAgICBbW2EsYl0sW2MsZF1dCi0KICAgIFsgWyBhICwgYiBdICwgWyBjICwgZCBdIF0gICAKLQogICAgW3t9LHt9XQotCiAgICBbe2E6MCxiOjF9LHtjOjIsZDozfV0KLQogICAgW2EsW11dCi0KICAgIFtbXSx7fV0KLQogICAgW3t9LGJdCi0KICAgIFthLF0KLQogICAgW2EsIGIsIF0KLQogICAgWyBhXQotCiAgICBbYSBdCi0KICAgIFsgYSBdCi0KICAgIFthLCBiXQotCiAgICBbYSAsYl0KLQogICAgW2EgLCBiXQotCiAgICBbICxdCi0KICAgIFssIF0KLQogICAgWyAsIF0KLQogICAgW2EsIGIsICwgXQotCiAgICBbWzExLDEyLDEzXSxbMjEsMjIsMjNdLFszMSwzMiwzM11dCi0KICAgIFt2YWx1ZSAxLCB2YWx1ZSAyICwgIHZhbHVlIDMgICwgXQ==",
            "load_out": [
                [],
                [
                    ""
                ],
                [
                    "",
                    ""
                ],
                [
                    "a"
                ],
                [
                    ":"
                ],
                [
                    []
                ],
                [
                    [
                        ""
                    ]
                ],
                [
                    [
                        "a"
                    ]
                ],
                [
                    {}
                ],
                [
                    {
                        "a": "0"
                    }
                ],
                [
                    "a",
                    "b"
                ],
                [
                    "",
                    "",
                    ""
                ],
                [
                    [],
                    []
                ],
                [
                    [],
                    [
                        ""
                    ]
                ],
                [
                    [
                        "a",
                        "b"
                    ],
                    [
                        "c",
                        "d"
                    ]
                ],
                [
                    [
                        "a",
                        "b"
                    ],
                    [
                        "c",
                        "d"
                    ]
                ],
                [
                    {},
                    {}
                ],
                [
                    {
                        "a": "0",
                        "b": "1"
                    },
                    {
                        "c": "2",
                        "d": "3"
                    }
                ],
                [
                    "a",
                    []
                ],
                [
                    [],
                    {}
                ],
                [
                    {},
                    "b"
                ],
                [
                    "a",
                    ""
                ],
                [
                    "a",
                    "b",
                    ""
                ],
                [
                    "a"
                ],
                [
                    "a"
                ],
                [
                    "a"
                ],
                [
                    "a",
                    "b"
                ],
                [
                    "a",
                    "b"
                ],
                [
                    "a",
                    "b"
                ],
                [
                    "",
                    ""
                ],
                [
                    "",
                    ""
                ],
                [
                    "",
                    ""
                ],
                [
                    "a",
                    "b",
                    "",
                    ""
                ],
                [
                    [
                        "11",
                        "12",
                        "13"
                    ],
                    [
                        "21",
                        "22",
                        "23"
                    ],
                    [
                        "31",
                        "32",
                        "33"
                    ]
                ],
                [
                    "value 1",
                    "value 2",
                    "value 3",
                    ""
                ]
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "list item": 35,
                "inline list": 35
            }
        },
        "nobleman": {
            "load_in": "LQogICAgWw==",
            "load_out": null,
            "load_err": {
                "message": "line ended without closing delimiter.",
                "line": "    [",
                "lineno": 1,
                "colno": 5
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "proverb": {
            "load_in": "LQogICAgWyw=",
            "load_out": null,
            "load_err": {
                "message": "line ended without closing delimiter.",
                "line": "    [,",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "marina": {
            "load_in": "LQogICAgW1td",
            "load_out": null,
            "load_err": {
                "message": "line ended without closing delimiter.",
                "line": "    [[]",
                "lineno": 1,
                "colno": 7
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "blister": {
            "load_in": "LQogICAgW117YTowfQ==",
            "load_out": null,
            "load_err": {
                "message": "extra characters after closing delimiter: ‘{a:0}’.",
                "line": "    []{a:0}",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "mentor": {
            "load_in": "LQogICAgW2FbYl0=",
            "load_out": null,
            "load_err": {
                "message": "expected ‘,’ or ‘]’, found ‘[’.",
                "line": "    [a[b]",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "valance": {
            "load_in": "LQogICAgW2FdYl0=",
            "load_out": null,
            "load_err": {
                "message": "extra characters after closing delimiter: ‘b]’.",
                "line": "    [a]b]",
                "lineno": 1,
                "colno": 7
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "eleven": {
            "load_in": "LQogICAgW3td",
            "load_out": null,
            "load_err": {
                "message": "expected ‘:’, found ‘]’.",
                "line": "    [{]",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "casing": {
            "load_in": "LQogICAgW31d",
            "load_out": null,
            "load_err": {
                "message": "expected value.",
                "line": "    [}]",
                "lineno": 1,
                "colno": 5
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "promenade": {
            "load_in": "LQogICAgW2F7Yl0=",
            "load_out": null,
            "load_err": {
                "message": "expected ‘,’ or ‘]’, found ‘{’.",
                "line": "    [a{b]",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "splurge": {
            "load_in": "LQogICAgW2F9Yl0=",
            "load_out": null,
            "load_err": {
                "message": "expected ‘,’ or ‘]’, found ‘}’.",
                "line": "    [a}b]",
                "lineno": 1,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "list item": 1,
                "inline list": 1
            }
        },
        "delusion": {
            "load_in": "W1sxMSwgMTIsIDEzXSwgWzIxLCAyMiwgMjNdLCBbMzEsIDMyLCAzM11d",
            "load_out": [
                [
                    "11",
                    "12",
                    "13"
                ],
                [
                    "21",
                    "22",
                    "23"
                ],
                [
                    "31",
                    "32",
                    "33"
                ]
            ],
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline list": 1
            }
        },
        "itinerant": {
            "load_in": "Wzc6MF0gZ2FpbjoKICAgIGRlc2M6IHRoZSBnYWluCiAgICB0eXBlOiBpbnB1dCBzaWduZWQ=",
            "load_out": null,
            "load_err": {
                "message": "extra characters after closing delimiter: ‘gain:’.",
                "line": "[7:0] gain:",
                "lineno": 0,
                "colno": 6
            },
            "encoding": "utf-8",
            "types": {
                "inline list": 1,
                "dict item": 2
            }
        },
        "geyser": {
            "load_in": "a2V5IDE6CiAgICAgICAgW3YxLAkgIHYyLCAgICAgIAl2MywJXQk=",
            "load_out": {
                "key 1": [
                    "v1",
                    "v2",
                    "v3",
                    ""
                ]
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "inline list": 1
            }
        },
        "muzzle": {
            "load_in": "d2hhdCBtYWtlcyBpdCBncmVlbgk6IAlncmVlbgljaGlsaWVzCQ==",
            "load_out": {
                "what makes it green": "\tgreen\tchilies\t"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 1
            }
        },
        "stylistic": {
            "load_in": "a2V5OiB2YWx1ZSAiIHZhbHVl",
            "load_out": {
                "key": "value \" value"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 1
            }
        },
        "hallway": {
            "load_in": "a2V5OiB2YWx1ZSAnIHZhbHVl",
            "load_out": {
                "key": "value ' value"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 1
            }
        },
        "acquire": {
            "load_in": "a2V5MTogJ0FuZCBGcmVkIHNhaWQgInlhYmJhIGRhYmJhIGRvbyEiIHRvIEJhcm5leS4nCmtleTI6ICJBbmQgRnJlZCBzYWlkICd5YWJiYSBkYWJiYSBkb28hJyB0byBCYXJuZXkuIgprZXkzOiAiQW5kIEZyZWQgc2FpZCAieWFiYmEgZGFiYmEgZG9vISIgdG8gQmFybmV5LiIKa2V5NDogJ0FuZCBGcmVkIHNhaWQgJ3lhYmJhIGRhYmJhIGRvbyEnIHRvIEJhcm5leS4nCmtleTU6IEFuZCBGcmVkIHNhaWQgInlhYmJhIGRhYmJhIGRvbyEiIHRvIEJhcm5leS4Ka2V5NjogQW5kIEZyZWQgc2FpZCAneWFiYmEgZGFiYmEgZG9vIScgdG8gQmFybmV5Lg==",
            "load_out": {
                "key1": "'And Fred said \"yabba dabba doo!\" to Barney.'",
                "key2": "\"And Fred said 'yabba dabba doo!' to Barney.\"",
                "key3": "\"And Fred said \"yabba dabba doo!\" to Barney.\"",
                "key4": "'And Fred said 'yabba dabba doo!' to Barney.'",
                "key5": "And Fred said \"yabba dabba doo!\" to Barney.",
                "key6": "And Fred said 'yabba dabba doo!' to Barney."
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 6
            }
        },
        "sexton": {
            "load_in": "Pg==",
            "load_out": "",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 1
            }
        },
        "roomy": {
            "load_in": "aW5ncmVkaWVudHM6CiAgICBncmVlbiBjaGlsaWVz",
            "load_out": null,
            "load_err": {
                "message": "unrecognized line.",
                "line": "    green chilies",
                "lineno": 1,
                "colno": 4
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "unrecognized": 1
            }
        },
        "brainwash": {
            "load_in": "PiB3aGF0IG1ha2VzIGl0IGdyZWVuPwo+",
            "load_out": "what makes it green?\n",
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "string item": 2
            }
        },
        "president": {
            "load_in": "ezp9",
            "load_out": {
                "": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "inline dict": 1
            }
        },
        "propose": {
            "load_in": "",
            "load_out": null,
            "load_err": {},
            "encoding": "utf-8",
            "types": {}
        },
        "pillage": {
            "load_in": "a2V5IDE6IHZhbHVlIDEKwqBrZXkgMjogdmFsdWUgMg==",
            "load_out": null,
            "load_err": {
                "message": "invalid character in indentation: '\\xa0' (NO-BREAK SPACE).",
                "line": " key 2: value 2",
                "lineno": 1,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 1,
                "unrecognized": 1
            }
        },
        "tombstone": {
            "load_in": "a2V5IDEgOiB2YWx1ZSAxCmtleSAyCSA6IHZhbHVlIDIKa2V5IDPCoCA6IHZhbHVlIDM=",
            "load_out": {
                "key 1": "value 1",
                "key 2": "value 2",
                "key 3": "value 3"
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 3
            }
        },
        "cavern": {
            "load_in": "a2V5IDE6CmtleSAyOiA=",
            "load_out": {
                "key 1": "",
                "key 2": ""
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 2
            }
        },
        "rascal": {
            "load_in": "a2V5IDE6CiAgID4gdmFsdWUgMQprZXkgMjogCiAgID4gdmFsdWUgMgprZXkgMzogIAogICA+IHZhbHVlIDM=",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "   > value 3",
                "lineno": 5
            },
            "encoding": "utf-8",
            "types": {
                "dict item": 3,
                "string item": 3
            }
        },
        "truncheon": {
            "load_in": "LQogICA+IHZhbHVlIDEKLSAKICAgPiB2YWx1ZSAyCi0gIAogICA+IHZhbHVlIDM=",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "   > value 3",
                "lineno": 5
            },
            "encoding": "utf-8",
            "types": {
                "list item": 3,
                "string item": 3
            }
        },
        "vagrant": {
            "load_in": "aW5saW5lIGRpY3Q6CiAgICB7YTpBLCBiOiBCLGMgOkMgLCBkIDogRCB9CmlubGluZSBsaXN0OgogICAgW2EsIGIsYyAsIGQgXQ==",
            "load_out": {
                "inline dict": {
                    "a": "A",
                    "b": "B",
                    "c": "C",
                    "d": "D"
                },
                "inline list": [
                    "a",
                    "b",
                    "c",
                    "d"
                ]
            },
            "load_err": {},
            "encoding": "utf-8",
            "types": {
                "dict item": 2,
                "inline dict": 1,
                "inline list": 1
            }
        },
        "frump": {
            "load_in": "a2V5IDE6IHZhbHVlIDEKa2V5IDI6CmtleSAzOgogICAgLSB2YWx1ZSAzYQogICAgLSB2YWx1ZSAzYgprZXkgNDoKICAgIGtleSA0YTogdmFsdWUgNGEKICAgIGtleSA0YjogdmFsdWUgNGIKa2V5IDU6CiAgICA+IGZpcnN0IGxpbmUgb2YgdmFsdWUgNQogICAgPiBzZWNvbmQgbGluZSBvZiB2YWx1ZSA1",
            "load_out": {
                "key 1": "value 1",
                "key 2": "",
                "key 3": [
                    "value 3a",
                    "value 3b"
                ],
                "key 4": {
                    "key 4a": "value 4a",
                    "key 4b": "value 4b"
                },
                "key 5": "first line of value 5\nsecond line of value 5"
            },
            "load_err": {},
            "encoding": "latin1",
            "types": {
                "dict item": 7,
                "list item": 2,
                "string item": 2
            }
        },
        "asylum": {
            "load_in": "//5rAGUAeQAgADEAOgAgAHYAYQBsAHUAZQAgADEACgBrAGUAeQAgADIAOgAKAGsAZQB5ACAAMwA6AAoAIAAgACAAIAAtACAAdgBhAGwAdQBlACAAMwBhAAoAIAAgACAAIAAtACAAdgBhAGwAdQBlACAAMwBiAAoAawBlAHkAIAA0ADoACgAgACAAIAAgAGsAZQB5ACAANABhADoAIAB2AGEAbAB1AGUAIAA0AGEACgAgACAAIAAgAGsAZQB5ACAANABiADoAIAB2AGEAbAB1AGUAIAA0AGIACgBrAGUAeQAgADUAOgAKACAAIAAgACAAPgAgAGYAaQByAHMAdAAgAGwAaQBuAGUAIABvAGYAIAB2AGEAbAB1AGUAIAA1AAoAIAAgACAAIAA+ACAAcwBlAGMAbwBuAGQAIABsAGkAbgBlACAAbwBmACAAdgBhAGwAdQBlACAANQA=",
            "load_out": null,
            "load_err": {
                "message": "invalid start byte",
                "line": "key 1: value 1",
                "lineno": 0,
                "colno": 0
            },
            "encoding": "utf-16",
            "types": {
                "unrecognized": 1
            }
        },
        "amendment": {
            "load_in": "PiDACj4gwQo+IP8=",
            "load_out": null,
            "load_err": {
                "message": "invalid start byte",
                "line": "> À",
                "lineno": 0,
                "colno": 2
            },
            "encoding": "bytes",
            "types": {
                "unrecognized": 1
            }
        },
        "academic": {
            "load_in": "77u/e30=",
            "load_out": {},
            "load_err": {},
            "encoding": "bytes",
            "types": {
                "inline dict": 1
            }
        },
        "paragon": {
            "load_in": "PiBTaG91bGQgbm90IGFsbG93IG11bHRpLWxpbmUgc3RyaW5ncwo+IGFuZCBsaXN0cyBhdCB0aGUgc2FtZSBsZXZlbAotIG9mIGluZGVudGF0aW9uLg==",
            "load_out": null,
            "load_err": {
                "message": "extra content.",
                "line": "- of indentation.",
                "lineno": 2,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "string item": 2,
                "list item": 1
            }
        },
        "chemist": {
            "load_in": "PiBTaG91bGQgbm90IGFsbG93IG11bHRpLWxpbmUgc3RyaW5ncwo+IGFuZCBkaWN0aW9uYXJ5IGl0bWVzIGF0IHRoZSBzYW1lIGxldmVsCm9mOiBpbmRlbnRhdGlvbg==",
            "load_out": null,
            "load_err": {
                "message": "extra content.",
                "line": "of: indentation",
                "lineno": 2,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "string item": 2,
                "dict item": 1
            }
        },
        "neophyte": {
            "load_in": "PiBTaG91bGQgbm90IGFsbG93IG11bHRpLWxpbmUgc3RyaW5ncwo+IHdpdGggdmFyeWluZyBsZXZlbHMKICAgID4gb2YgaW5kZW50YXRpb24u",
            "load_out": null,
            "load_err": {
                "message": "invalid indentation.",
                "line": "    > of indentation.",
                "lineno": 2,
                "colno": 0
            },
            "encoding": "utf-8",
            "types": {
                "string item": 3
            }
        }
    }
}